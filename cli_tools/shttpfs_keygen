#!/usr/bin/env python
import os, getpass, argparse, binascii
import sys

from shttpfs.common import *
from shttpfs.crypto import *

# File extensions for public and private key files
PUB_EXT = '.key'
PRV_EXT = '.key'

# Handle command line arguments
parser = argparse.ArgumentParser(description='Generate public and private key pair for authentication.')
parser.add_argument('pubkey', nargs=1 , help='Public key file')
parser.add_argument('privkey', nargs=1, help='Private key file')
args = parser.parse_args()

pubkey_file  = args.pubkey[0]
privkey_file = args.privkey[0]


# Public and private key files should be different
if pubkey_file == privkey_file:
    print 'Error: public and private key file names are identical.'
    quit()

# Check if the files exist already and ask the user if they wish to overwrite
if os.path.isfile(exsure_extension(pubkey_file, PUB_EXT)) or os.path.isfile(exsure_extension(privkey_file, PRV_EXT)):
    print 'Public and/or private key files already exist, overwrite?'

    while True:
        answer = raw_input('Y/N: ')

        if answer.lower() == 'y':
            break

        elif answer.lower() == 'n':
            print 'Please change file names in your command, exiting.'
            quit()

# If above passed, prompt for new password to encrypt the private key
password = prompt_for_new_password()

# Create new key pair and write to the files
write_keypair(password, pubkey_file, PUB_EXT, privkey_file, PRV_EXT)
